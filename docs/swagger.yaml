basePath: /api/v1
definitions:
  dto.JSONResult:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.LobbyCreateRequest:
    properties:
      admin_user_id:
        type: integer
      name:
        type: string
      races:
        items:
          type: integer
        type: array
      users:
        items:
          type: integer
        type: array
    required:
    - admin_user_id
    - name
    - users
    type: object
  dto.LobbyResponse:
    properties:
      admin_user_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      races:
        items:
          $ref: '#/definitions/dto.RaceResponse'
        type: array
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.LobbyUpdateRequest:
    properties:
      admin_user_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      races:
        items:
          type: integer
        type: array
      users:
        items:
          type: integer
        type: array
    required:
    - admin_user_id
    - id
    - name
    - users
    type: object
  dto.LoginRequest:
    properties:
      email:
        maxLength: 125
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.ParagraphResponse:
    properties:
      id:
        type: integer
      length:
        type: integer
      source:
        type: string
      text:
        type: string
    type: object
  dto.PermissionResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    type: object
  dto.PermissionStoreRequest:
    properties:
      name:
        maxLength: 125
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.PermissionUpdateRequest:
    properties:
      name:
        maxLength: 125
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.RaceCreateRequest:
    properties:
      admin_user_id:
        type: integer
      finished:
        type: boolean
      lobby_id:
        type: integer
      paragraph_id:
        type: integer
      users:
        items:
          type: integer
        type: array
    required:
    - admin_user_id
    - finished
    - lobby_id
    - paragraph_id
    - users
    type: object
  dto.RaceResponse:
    properties:
      admin_user_id:
        type: integer
      id:
        type: integer
      lobby_id:
        type: integer
      paragraph_id:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.RaceUpdateRequest:
    properties:
      admin_user_id:
        type: integer
      finished:
        type: boolean
      id:
        type: integer
      lobby_id:
        type: integer
      paragraph_id:
        type: integer
      users:
        items:
          type: integer
        type: array
    required:
    - admin_user_id
    - finished
    - id
    - lobby_id
    - paragraph_id
    - users
    type: object
  dto.RegisterRequest:
    properties:
      email:
        maxLength: 125
        type: string
      name:
        maxLength: 125
        type: string
      password:
        minLength: 8
        type: string
      password_repeat:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    - password_repeat
    type: object
  dto.RegisterResponse:
    properties:
      token:
        type: string
    type: object
  dto.RoleAddPermissionsRequest:
    properties:
      permissions_id:
        items:
          type: integer
        type: array
    required:
    - permissions_id
    type: object
  dto.RoleRemovePermissionsRequest:
    properties:
      permissions_id:
        items:
          type: integer
        type: array
    required:
    - permissions_id
    type: object
  dto.RoleResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    type: object
  dto.RoleStoreRequest:
    properties:
      name:
        maxLength: 125
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.RoleUpdateRequest:
    properties:
      name:
        maxLength: 125
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.UserRaceResultCreateRequest:
    properties:
      accuracy:
        maximum: 100
        type: number
      duration:
        type: number
      race_id:
        type: integer
      user_id:
        type: integer
      wpm:
        type: number
    required:
    - accuracy
    - duration
    - user_id
    - wpm
    type: object
  dto.UserRaceResultResponse:
    properties:
      accuracy:
        type: number
      created_at:
        type: string
      duration:
        type: number
      id:
        type: integer
      race_id:
        type: integer
      user_id:
        type: integer
      wpm:
        type: number
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserStoreRequest:
    properties:
      email:
        maxLength: 125
        type: string
      name:
        maxLength: 125
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserUpdatePasswordRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: Backend for speedtyping service
  title: Typograph Backend
  version: "1.0"
paths:
  /lobbies:
    get:
      consumes:
      - application/json
      description: List of lobbies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LobbyResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - lobby
    post:
      consumes:
      - application/json
      description: Create a new lobby
      parameters:
      - description: Lobby store request
        in: body
        name: lobbyStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LobbyCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.LobbyResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - lobby
  /lobbies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a lobby
      parameters:
      - description: Lobby ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - lobby
    get:
      consumes:
      - application/json
      description: Get a lobby by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.LobbyResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - lobby
    patch:
      consumes:
      - application/json
      description: Update a lobby
      parameters:
      - description: Lobby update request
        in: body
        name: lobbyStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LobbyUpdateRequest'
      - description: Lobby ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.LobbyResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - lobby
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
      tags:
      - auth
  /me:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - auth
  /permissions:
    get:
      consumes:
      - application/json
      description: List of permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PermissionResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - permission
    post:
      consumes:
      - application/json
      description: Create a permission
      parameters:
      - description: Permission store request
        in: body
        name: permissionStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionStoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - permission
  /permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - permission
    get:
      consumes:
      - application/json
      description: Get a permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - permission
    patch:
      consumes:
      - application/json
      description: Update a permission
      parameters:
      - description: Permission update request
        in: body
        name: permissionUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionUpdateRequest'
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - permission
  /races:
    get:
      consumes:
      - application/json
      description: List of races
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RaceResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
    post:
      consumes:
      - application/json
      description: Create a new race
      parameters:
      - description: Race store request
        in: body
        name: raceStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RaceCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RaceResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
  /races/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a race
      parameters:
      - description: Race ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - race
    get:
      consumes:
      - application/json
      description: Get a race by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RaceResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
    patch:
      consumes:
      - application/json
      description: Update a race
      parameters:
      - description: Race update request
        in: body
        name: raceStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RaceUpdateRequest'
      - description: Race ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RaceResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
  /races/add_user_race_result:
    post:
      consumes:
      - application/json
      description: Add a race result for each user
      parameters:
      - description: Result update request
        in: body
        name: userRaceResultCreateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UserRaceResultCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserRaceResultResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
  /races/get_user_race_result/:user_id:
    get:
      consumes:
      - application/json
      description: Get a list of result by user id
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserRaceResultResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
  /races/leaderboard:
    get:
      consumes:
      - application/json
      description: Get a list of the best wpm results
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserRaceResultResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - race
  /random_paragraph:
    get:
      consumes:
      - application/json
      description: Get random quote
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.ParagraphResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - paragraph
  /register:
    post:
      consumes:
      - application/json
      description: Register a user
      parameters:
      - description: Register Request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
      tags:
      - auth
  /role/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Remove permissions from role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role remove permissions request
        in: body
        name: roleRemovePermissionsRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RoleRemovePermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - role
    post:
      consumes:
      - application/json
      description: Add permissions to role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role add permissions request
        in: body
        name: roleAddPermissionsRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RoleAddPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - role
  /roles:
    get:
      consumes:
      - application/json
      description: List of roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RoleResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - role
    post:
      consumes:
      - application/json
      description: Create a role
      parameters:
      - description: Role store request
        in: body
        name: roleStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RoleStoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - role
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - role
    get:
      consumes:
      - application/json
      description: Get a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - role
    patch:
      consumes:
      - application/json
      description: Update a role
      parameters:
      - description: Role update request
        in: body
        name: roleUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RoleUpdateRequest'
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - role
  /users:
    get:
      consumes:
      - application/json
      description: List of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: User store request
        in: body
        name: userStoreRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UserStoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JSONResult'
      security:
      - ApiKeyAuth: []
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update password a user
      parameters:
      - description: User update password request
        in: body
        name: userUpdatePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdatePasswordRequest'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
      security:
      - ApiKeyAuth: []
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
